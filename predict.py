from graphql import getMatchesByLeagueId, getMatchesByIdsfrom scipy.stats import poissondef countAverageGoals(matches):  matches = list(filter(lambda match: match["status"] == "FINISHED", matches))   homeTeamScoredTotal = sum([i['goalsHomeTeam'] for i in matches])  awayTeamScoredTotal = sum([i['goalsAwayTeam'] for i in matches])    totalFinishedMatches = len(matches)    if totalFinishedMatches == 0:      avaregeScoredGoalsHome = 0      avaregeScoredGoalsAway = 0  else:      avaregeScoredGoalsHome = homeTeamScoredTotal/totalFinishedMatches      avaregeScoredGoalsAway = awayTeamScoredTotal/totalFinishedMatches    return {        "avaregeScoredGoalsHome": avaregeScoredGoalsHome,        "avaregeScoredGoalsAway": avaregeScoredGoalsAway,        "averageConcededGoalsHome": avaregeScoredGoalsAway,        "averageConcededGoalsAway": avaregeScoredGoalsHome      }       def countGoalsMatrix(expectedHomeTeamGoals, expectedAwayTeamGoals):    matrixSize = 10        goalsInterval = range(0,matrixSize)  Matrix = [[0 for x in goalsInterval] for y in goalsInterval]      for hg in goalsInterval:    for ag in goalsInterval:      homeGoalsProbability = poisson.pmf(hg, expectedHomeTeamGoals)      awayGoalsProbability = poisson.pmf(ag, expectedAwayTeamGoals)            Matrix[hg][ag] = homeGoalsProbability * awayGoalsProbability         return Matrix def calculateProbability(matrix, fn):    probability = 0    for h in range(10):        for a in range(10):          if(fn(h,a)):              probability = probability + matrix[h][a]        return round(probability * 100)          def predictMatch(match):    matchLeagueId = match["league"]["_id"]        homeTeamHistoricalMatches = match["historicalMatches"]["home"]    awayTeamHistoricalMatches = match["historicalMatches"]["away"]        result = {        "matchId": match["_id"]        }        if (len(homeTeamHistoricalMatches) < 3 or len(awayTeamHistoricalMatches) < 3):        result["predictions"] = None        return result        homeAvarageGoals = countAverageGoals(homeTeamHistoricalMatches)    awayAvarageGoals = countAverageGoals(awayTeamHistoricalMatches)          leagueMatches = getMatchesByLeagueId(matchLeagueId)    leagueAvarageGoals = countAverageGoals(leagueMatches)           if(leagueAvarageGoals["avaregeScoredGoalsHome"] == 0 or leagueAvarageGoals["averageConcededGoalsAway"] == 0):        result["predictions"] = None       return result       if(leagueAvarageGoals["avaregeScoredGoalsAway"] == 0 or leagueAvarageGoals["averageConcededGoalsHome"] == 0):       result["predictions"] = None       return result            homeAtackStrengthAtHome = homeAvarageGoals["avaregeScoredGoalsHome"]/leagueAvarageGoals["avaregeScoredGoalsHome"]     awayTeamDefensiveStrengthAtAway = awayAvarageGoals["averageConcededGoalsAway"]/leagueAvarageGoals["averageConcededGoalsAway"]        awayAtackStrengthAtAway = awayAvarageGoals["avaregeScoredGoalsAway"]/leagueAvarageGoals["avaregeScoredGoalsAway"]      homeTeamDefensiveStrengthAtHome = awayAvarageGoals["averageConcededGoalsHome"]/leagueAvarageGoals["averageConcededGoalsHome"]      expectedHomeTeamGoals = homeAtackStrengthAtHome * awayTeamDefensiveStrengthAtAway * homeAvarageGoals["avaregeScoredGoalsHome"]    expectedAwayTeamGoals = awayAtackStrengthAtAway * homeTeamDefensiveStrengthAtHome * awayAvarageGoals["avaregeScoredGoalsAway"]      goalsMatrix = countGoalsMatrix(expectedHomeTeamGoals, expectedAwayTeamGoals)       predictions = {        "MatchWinner": {            "Home": calculateProbability(goalsMatrix, lambda h,a: h > a),            "Draw": calculateProbability(goalsMatrix, lambda h,a: h == a),            "Away": calculateProbability(goalsMatrix, lambda h,a: h < a)        },        "GoalsOverUnder": {            "Under 0.5": calculateProbability(goalsMatrix, lambda h,a: h + a < 0.5),            "Over 0.5": calculateProbability(goalsMatrix, lambda h,a: h + a > 0.5),            "Under 1.5": calculateProbability(goalsMatrix, lambda h,a: h + a < 1.5),            "Over 1.5": calculateProbability(goalsMatrix, lambda h,a: h + a > 1.5),            "Under 2.5": calculateProbability(goalsMatrix, lambda h,a: h + a < 2.5),            "Over 2.5": calculateProbability(goalsMatrix, lambda h,a: h + a > 2.5),            "Under 3.5": calculateProbability(goalsMatrix, lambda h,a: h + a < 3.5),            "Over 3.5": calculateProbability(goalsMatrix, lambda h,a: h + a > 3.5),            "Under 4.5": calculateProbability(goalsMatrix, lambda h,a: h + a < 4.5),            "Over 4.5": calculateProbability(goalsMatrix, lambda h,a: h + a > 4.5),            "Under 5.5": calculateProbability(goalsMatrix, lambda h,a: h + a < 5.5),            "Over 5.5": calculateProbability(goalsMatrix, lambda h,a: h + a > 5.5),            "Under 6.5": calculateProbability(goalsMatrix, lambda h,a: h + a < 6.5),            "Over 6.5": calculateProbability(goalsMatrix, lambda h,a: h + a > 6.5)        }    }        result["predictions"] = predictions    return result    def predict(ids: [str]):    matches = getMatchesByIds(ids)    print('predictings')    resultList = []          for match in matches:         matchPredictions = predictMatch(match)        resultList.append(matchPredictions)        return resultList